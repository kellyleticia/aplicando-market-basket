 Comem tem escoalizando estrutura de dados nada mais é que a organização de dados na memória de um computador ou dispositivo de armas em amel. Dados estruturados da forma certa vão trazer para a aplicação um melhor desempenho de processamento. É de, para os íntimos, é um conceito que vemos nos cursos de computação, mas que nem sempre conseguimos absorver por muitos fatores, como há complexidade do assunto e lajada de dados que apresentada ou ainda pela falta de conhecimento de base da programação. Neste vídeo vamos despantar alguns desses fantasmas e deixar você mais confiante para encarar diferente a tal da estrutura de dados. Olá, qual de fonte as ou cdfs para os íntimos? Tudo bem com vocês estamos abordando um tema impor tantíssimo para todas as pessoas que desejam ser e até as que já são programas dois. Para me convivem uma vaga que as tecnologias batem exatamente com seu perfil, linguagem, framework, bancos de dados e todos os reques de procedural. Até que você se depara com aquele requezito chamado estrutura de dados. Nessa hora batte para muitos daquele frio na barriga, mas nós estamos aqui para ajudar quem sofre desse mal. O que que é tão importante assim conhecer estrutura de dados? Conhecer e saber qual estrutura de dados deve ser aplicada é fundamental. Porque através dela que vamos conseguir administrar uma grande quantidade de dados com alta performance no processamento. Usando banco de dados serviços de busca e indexação de dados e também na construção de algoritmos eficiente. Utilizamos estruturas de dados para basicamente realizar operações como inserir, escuir, ou localizar um registro. Percorrer todos os registros e, clássico, os registros em uma ordem predeterminada. Agora conta para a gente. Quanto as aplicações você consegue citar que não possuem dados acerem manipulados. Difícil, por isso é de tão primordial. Mas ficar só falando da sua importância não vai fazer com que você aprenda. Por isso vamos te apresentar as principais estruturas de dados utilizadas. Começando com o famoso parrei. Um arranhe consiste em armazenar uma coleção de elementos do mesmo tipo, onde cada um desses elementos pode ser identificados por, pelo menos, um índice ou uma chave. Vale aqui uma observação. Sabemos que linguagens como pega a peio já a escrita. Permita em tipos diferentes no arrei, mas elas são exceção a ré. O arrei é a mais simples estrutura de dados para armazenamento em memória. E praticamente todas as linguagens de programação incluem um tipo de dados a ré nativamente. O arrei também é conhecido como vetor que trabalha com estruturas unes mencionais e matris que trabalha com estruturas multas mencionais. Vamos com exemplo. Pra quem não reconheceu estamos usando aqui o Jávos Críbete. Declaramos dois arrejas. O primeiro dia da semana que é um arrei único e dimensional ou vetor e o segundo usuário. Um arrei multe de mencionar ou matris com o nome sobre nome e empresa. Quando a sonto é acessar um dos elementos do arrei leva uma vantagem em relação a outras estruturas. Pôs podemos acessar o elemento diretamente, apenas passando o índice desse elemento. Da sua olhada no console Loki. No primeiro acessamos o índice dois turdias da semana que vai trazer o resultado. Quarta-feira. E no segundo índice um dois que vai trazer o resultado código fonte. Deu para notar que nos javes cripte o índice do arrei começa com o zero. E isso acontece na maioria das linguagens. Embora, existem algumas exceções. A linguagem de programação também apresenta diversos métodos que facilitam a manipulação dos arreres. Como com o catenácte dois ou mais arreres, criaram um novo arrei a partir de um filtro, escurrir ou incluir elementos. Mas esses e vários outros metros você implementar o Zacete ou não de acordo com a linguagem. Ainda vamos ver alguns desses métodos se anunplementados nos próximos exemplos com javes cripte. Vamos então abordar a nossa segunda estrutura de dados. A pilha. Uma pilha é uma coleção ordenada de itens baseada no princípio Lifo, que é a sigla para a less in force alt. Ou seja, o último elemento é o prínereo. Aça aí. Para retirar qualquer dúvida sobre esse princípio, vamos setar o exemplo mais illustrativo de todos. Uma pilha de prato estúgios a cena elevados. O último prato empilhado é justamente o primeiro que tem que ser levado. Isso quer dizer que tanto a adição quanto a remoção dos elementos acontece na mesma extremidade da pilha. Jamada de topo. A extremidade oposta é a chamada base, que é aquele primeiro prato que foi colocado por lá. Eu tenho certeza de que você entendeu o princípio Lifo. Só para você conhecer um pouquinho da história, o conceito de pilha foi inicialmente proposto em 1955 e patenteado em 1957 pelo alemão. Eu vou falar em Crudarek Ludwig Bower, que também foi o autor da primeira definição de engenharia de sota. Deu para notar que a pilha é bem parecida com o arrei, mas conseguimos ter mais control sobre a adição e a remoção dos elementos dessas estruturas. Vamos ao um exército? Não temos uma estrutura de pilha implementada nativamente no JavaScript. Mas podemos criar a nossa própria. Primeiro, criamos uma classe que será a nossa estrutura de pilha. Depois criamos dois metros. O poche para empilhar ou adicionar o elemento do topo da pilha e o pop. Para desempilhar ou remover o elemento do topo da pilha. Agora vamos instância a classe pilha e adicionar cinco elementos usando o método do pássolo. Ele é o que você pode ver como a pilha se comportou durante a inclusão dos elementos. Tegou a vez que remover esses mesmos elementos da nossa pilha. Aí é fácil, basta chamar o método do pop. Também criamos uma imagem para ilustrar o comportamento da exclusão dos elementos da pilha. Os irrevers da pensando, mas aí, onde eu vou usar esse lance de pilha no mundo real? Tem a calma jovem em padauã. Nós vamos te dar um exemplo agora a mír. Estábamos quando você está aí na sua ideia favorita, codando loucamente. Aí, como é de um erro qualquer e resolve voltar atrás. Basta dar aí um famoso contrô-se que tudo vai ser resolvido. Tudo que você vai digitando vai sendo armazenado em uma pilha. E aí, quando você erra e aperta a Ctrl Z, a ideia remove a última coisa que foi digitada na pilha. Se você apertar o Ctrl Z mais vezes do que deveria, basta dar o Ctrl Shift Z e a ideia coloca o que foi removido sem querer de volta a pilha. Chegou agora a vez de abordar a pilha, assim como a pilha a pilha também é uma coleção ordenada de itens. O que a diferença é o princípio que são baseados. Como já explicamos a pilha segue o Lifo. Já a pilha é baseada no princípio FIFO, por assim, Forst Alt. O primeiro entrar é o primeiro a sair. A filha recebe esse nome porque exemplifique exatamente uma fila na vida real. Aquelas filas maravilhosas nos bancos nos restaurantes famosos ou na hora de embarcar no avião. A adição de novos elementos é feita no fim da fila que chamamos de Teo. E a remoção é feita no início da fila que chamamos de HAD. Na computação também temos vários exemplos que vêm a nossa mente quando falamos de fila. O sistema de mensageria como o Kafka e o WebTmQ são implementações robustas de filas. Vamos ao nosso exemplo. Primeiro, criamos uma classe que será a nossa estrutura de fila. Depois chamamos dos métodos. O inquio para adicionar um elemento no final da fila e o decil para remover um elemento no início da fila. Criamos uma instância para classe fila e adicionamos 3 elementos usando método e o quilo. Agora vamos usar o método decil para remover os elementos da nossa fila. Tanto para fila. Como para pilha, poderíamos ter implementado outros métodos. Como retornar o tamanho, se está vazio ou não. Mas, preferemos focar aqui no que é essencial dessas estruturas para facilitar o seu e entendimento. Vamos passar agora para outras estruturas de dados também muito namosa, a árvore. Diferente das estruturas que já citamos, a árvore é uma coleção não ordenada de itens. O modelo obstrato de uma estrutura e ararquica. Esse tipo de coleção é bastante usado quando queremos encontrar um elemento da forma mais fácil por si. Quando falamos de árvores, o que vem no somente? Além daquelas verdinhas lindas que encontramos da natureza. Bom, pelo menos na minha vem aquela árvore genealógica, uma estrutura que usamos para amapiar os nossos ansteis. Trais e os nossos decindências. Agora trazendo o promundo da computação, a esarvoreção estruturas de dados constituiidas de nós, que tem um relacionamento, pai, filho. Cada nós tem um pai. Menos o primeiro nó que fica lá em cima no topo da árvore, que chamamos de raiz. E cada nó pode ter zero ou mais filhos ou ramos. Além da raiz, que fica no topo, os outros nóis se dividem em mais internos e nóis externos. Os nóis internos são aqueles que possuem pelo menos um filho. E nosso exemplo, os nóis B, F, D, EG. Os nóis externos que também são chamados de folhas, são aqueles que não possuem nenhum filho. No nosso exemplo, são os nóis e, jk, c, L, H. Exemplos de árvore, muito conhecidos, são os da árvore binária, o da árvore binária de busca chamados também pela C, D, S, C, de B, N, S, T, mais, qual é a diferença entre a árvore. A árvore binária em série seus nois sem nenhum uma regra definida. Já a árvore binária de busca em nisso em operação, inserindo a raiz e o primeiro nó filho, a partir do segundo nó é feita a verificação. O valor é maior do que o valor da raiz. Se sim, ele será adicionado a direita. Se não, ele será adicionado a esquerda. E a mesma coisa se repete para os outros nóis. Com isso, sabemos que os nóis e subi árvores, dasquerda terão sempre valores menores que os da direita. Assim podemos fazer uma busca nessa árvore de uma forma muito mais eficiente. Vamos começar declarando a nossa classe árvore, e depois criamos o método interir com a validação do valor para criarmos a nossa árvore binária de busca. Primeiro, vamos verificar se existe um valor. E aí, valida o lado acera adicionado. Se o valor for maior adiciona direita, se o valor for menor, a esquerda. E se não existir o valor, vamos criar uma nova árvore. Agora vamos instanciar uma nova árvore inserindo a raiz e alguns nóis. Pra você entender melhor, na imagem temos aí a representação da nossa árvore. Mas, vale frizar que isso é só o básico do básico das árvores. Só para você ter aí uma ideia, existem diversas formas de percorrer uma árvore, outros tipos de árvores onde é possível, por exemplo, balanciar o número de nós para que um lado da árvore, e seja semelhante ao outro. Enfim, elas são um assunto para vários vídeos aqui no caso. Como você pode perceber estrutura de dados é um tema enorme, e merece ser estudado mais a fundo. Se estamos aqui apenas algumas estruturas de dados mais conhecidas. Mas, além delas, temos adicionários, criapos com juntos entre outras. Você deve ter esse conhecimento, saber como implementar um algoritmo de uma forma mais eficiente, certamente será um grande diferencial no seu corril. E te abrirá em muitas portas na hora de conseguir aquela vaga marota, que bate exatamente com o seu perfil, incluindo conhecimento estrutura de dados. Mas vamos ficando por aqui, mas não vamos deixar de pedir para você nos contar o que você gostaria de que abordá-semos aqui no próximo adicionário do programa do. Estamos sempre de olho nos comentários, e tentando atender aos pedidos mais recorrentes. Agora sem nós estamos de partida, viu? Até o próximo vídeo. Tchau! Falada estrutura de dados em poucos minutos é algo complexo. Por isso vamos deixar aqui a sugestão. Dece livre aqui. estrutura de dados e algoritmos com os javascript. Quem é o torro? Não, o Ione, grona, nossa amiga, e olha ela é fera. Ele vai te ajudar a ir diversas a se aprofundar na santa. Deixemos aqui do lado o link para a playlist do Dicionário do Programador. Escole uma santo que tinha interessa, tá tudo ordenado, e fica com a gente por mais um tempo. Vai lá.