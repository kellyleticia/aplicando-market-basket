 Olá, mano, nesse vídeo eu vou estar falando um pouquinho sobre estruturas de dados, que é uma área que particularmente eu gosto bastante e que também extremamente útil em programação. Bom, pessoal, que está iniciando em computação, geralmente começa a aprender no linguagem de programação. Você tem ali um pouquinho de lógico de programação às vezes e depois logo começa a dar foco em linguagem de programação. E o problema é que eu tenho reparado que o siniciente se ele estende é a ficar dando bastante atenção para a linguagem de programação. Tanto no sentido de aprender a linguagem de x e x são o oz, ou até de focar bastante em uma só linguagem. E é a camos que é sendo, ao mesmo não se dando conta de que existem outras áreas que são muito mais gênélicas e talvez até é muito mais importante. Do que saber, várias linguagens de programação mesmo que saber muito sobre uma sótua. Uma dessas áreas, por exemplo, é a área de estrutura de dados. Por o nosso modo, a gente pode dizer que estrange dados, como o próprio termo sujele, significa estruturar dados ou seja, organizar dados. A ideia é base que é a seguinte, se você é mais inaises dados de uma forma inteligente, quanto você precisa se sair, esse acesso vai ser muito mais conveniente, digamos assim. E por conveniente, você pode ser tanto você gastar menos tempo para a ser salada determinado dado, como também gastar menos memória do que você gastaria através de outro método, certo? Só tem uma certa sutileza entre o que o pessoal chama de estrutura de dados ou o tipo obstrato de dados. Já na graduação, quando eu tive meu primeiro, minha primeira ciclina formal sobre estrutura de dados, eu digo formal na porque antes eu vou fazer a maratônia, já tinha visto estrutura de dados assim, com o divista prático né? Então, quando eu tive a primeira ciclina formal de estrutura de dados, professor eu lembro de ele ter enfatizado bastante, eu acho que quase é mal de inteira. Sobre a diferença de tipo obstrato de dados e estruturidades, porque geralmente a gente chama de estruturidades coisas que na verdade são tipo obstrato de dados, então seria como uma busa de linguagem. E lá, eu já chava isso assim, meio que frescura, sabe? Então aqui, como é uma vida de divulgação, eu nem vou para o paco isso, porém eu estou falando porque se você encontrar um livro, essa distinção não estranhe, eu inclusive aconcer, se você quer se aprofundar da apisquisada na diferença de estruturidades e tipo obstrato de dados do ponto de vista assim, mas o lista possível que você vai encontrar nos livros mais tradicionales e computação. Mas aqui, eu acho que não é tão importante, eu só atrapalher ele. Então só é capturando a ideia básica de estruturidades, é você é mais enlato de formos inteligentes para ter uma série de outras ventagens depois. Então, como a na lojinha, imagine por exemplo um quarto que está extremamente armado, se ele não é organizado, que você sabe onde está tudo nesse quarto, por causa da organização dele. E aí, se você precisar pegar a ceilama camiseta ou qualquer outro objeto que seja nesse quarto, você tem que achar muito mais facilmente o objeto, se o quarto estiver armado do que, o contrário seria um quarto extremamente para usar ele, você teria dificuldade de achar o estado procurado, certo? Bom, existem muitas estruturas de dados por aí e várias outras ainda não está sendo criadas com o tempo, que eu vou estar fazendo aqui e falar de algumas estruturas básicas, porque elas provavelmente vão ser usadas em estruturas mais lançadas. Bom, já que a estrutura de dados vai armar as sinais de dados, você precisa de uma regra de armazenamento, você precisa dizer como que você quer armazenar. Como que você quer armar o quarto, como que você quer organizar o seu quarto? Por exemplo, se você usa pouca roupa de frio, não faz muito sentido você deixar a sua roupa de frio no lugar mais fácil de acessar, seria no caso aquele primeiro que você vai ver quando você abrir seu alço agora, vou boar ver. Então, vai mais o menos essa ideia, você vai armazenar conforme determinadas revas. Por exemplo, a estrutura de dados que eu acho que é mais intuitiva para a gente que é um chiveiro direito, é a estrutura de dados chamada de fila, que é uma fila, pelo menos uma fila simples, né, que é aquela que pessoa entra em ninguém passa na frente e vai seguir na fila normalmente, sem ter nada que ponder, nada que de previdades para outras pessoas, certo? Então, no caso da fila, tal da regra lá que eu tinha deito que todos os estruturas dados têm, pelo menos o maranei, mas pode ter mais de uma, o caso da fila seria que a primeira pessoa que entra é a primeira sair, porque se afelad justa você é a primeira pessoa que entra, você vai ser a primeira pessoa ser a dendida e vai embora, mas tem que encarmetre o pessoal com uma chamada de FIF, que é a first info e o seu primeiro entrar a primeira sair, e essa é a regra básica que você vai usar para criar uma fila, a primeira pessoa da fila vai ser a dendida e não vai ter o trapaçagem que se adeir no meio da fila. Uma outra estrutura de dados que também é bastante intuitivo para a gente, porque tem todo lugar, é a fila. Vamos no caso da fila, por exemplo, você poderia pensar uma filha de pratos, sei lá, uma série de pratos, empelhadas no ensino do outro, e é um sporguelamento em um prato que você gosta, que é um prato de uma cor diferente, e tal, e só perguntar em cima da fila, ele tá no meio, como é que você vai fazer para tirar esse prato, se você forma uma pessoa normal, você vai ter que tirar o que tem em cima desse prato para que você vai ser prato, porque você tirar esse prato, logo no ditar e puxar, provavelmente é quebrar que o prato quer dizer em bater, ou alguns dos pratos pelo menos. Então, a ideia de filha é basicamente essa, você vai tirar o último cara, então, caracta à cima, você tira ele, depois de tirar o próximo, depois de tirar o próximo até chegar no elemento que você quer, e repare para você construir a filha, você constrói a polodano a primeira na filha, e aí o segundo primeiro, e assim por dia é, certo, você não faz o contrário, você não faz tipo a poloca primeira, depois coloque em baf, o escoloque em baf. Agora eu treme uma estécnica, o serio livre que seria Lestein, First Alto, o serio. O último entrar é o primeiro a sair, porque você colocou ali o primeiro cara, o segundo e o terceiro, quando você quiser tirar qualquer um que seja, necessariamente você vai ter que tirar primeiro esse cara de cima, então, como ele foi o último entrar, ele vai ser o primeiro a sair, essa é a régua, tanto a filha é com a fila são estruturidades que derive um de uma outra, classe de gamos assim de estruturas, são as lestas, lista pode ser sem lá, a lista de mercado, uma lista de coisas para fazer, enfim, e aí, tanto a filha é com a fila são um caso particular, e a gente de uma lista, bom, as vezes elas podem ser simplesmente em cadiado, significa que se você passar do elemento a probe, você não consegue passar do beiro indo proar, você ele só tem um sentido ali que você pode se mover, o outro tipo seria o de duplemento em cadiado, que você pode ir do ar probeiro proar, e enfim, diversas variações de listas e pilhas e fila são as entuges, essa é isso que a gente falou até agora são estruturidades lineares, porque é linear, porque você pode ver elas em uma dimensão, uma linha, então a gente viu um pouco sobre estruturidades lineares e tem também as nonlineares, as nonlineares elas podem ficar bem complicadas, só que eu vou dar uns exemplos das plomensas mais comuns, e eu espero que faço sentido na sua cabeça, por uma das nonlineares que eu gosto muito e que eu usava bastante, quando eu participava a la de campana, a gente foi uma gramação e treinada, na época que eu acho que programação é o sede, que traduzindo significa conjunto, e aí você pode pensar um conjunto como se fosse um conjunto matemático mesmo, no sentido de que esse conjunto ele possui um certo número de elementos, sem que a gente reedição, e claro, se você estiver falando do aspecto de computação, esse conjunto vai precisar ser um conjunto finito, não pode ser um portem infinites elementos ali igual, pode na matemática por exemplo, o sede pode em várias pastantes na forma com eleção implementados, eles podem ser denadas, podem não ser infinites, aliás quando eu disse que é implementado, implementação coisas assim, significa que você colocou em código essas ideias, outra estrutura que é bem legal são os funcionários, os funcionários eles funcionam basicamente assim, você vai ter uma chave e um valor, cada elemento vai precisar ter uma chave e um valor, a chave vai ser o que vai distinguir esse elemento, então vai ser um sucesso CPF dele, CPF se você não sabe aqui no Brasil é um número que cada pessoa tem e precisa ser um, diferente do LG e o exemplo que não precisa ser um, então se vai ter a chave o valor e essa chave que vai identificar o elemento, o valor pode ser petido, não tem problema, só que o achave não pode ser petido, porque se ela vai identificar o elemento, tiver dois elementos com a mesma chave, como você vai de fato identificar a falar qualquer qual, então o valor pode identificar, mas a chave não, sei lá se você está na uso, você vai receber ela no número que pessoa chama de número uso, esse número é o preciência 1, ou mesmo até o meu ser preciência 1, então a chave vai ser o seu número o uso, e o valor pode ser uma série de coisas, e como um mente nesse caso que eu dei, é um conjunto de dados, então vai ser o seu nome, se ele derreço quando você entrou, seja que ano que você ingressou no universidade e coisas assim, claro, nesse elemento que eu estou dando, não precisa ser innecessariamente, só ter um número uso como chave, existem combinações de chaves, você tem duas, duas esperagens informações ou mais esperagens informações que acabam no conjunto de ano machado, então uma chave pode variar bastante também, é um carrego aqui, você precisa conseguir identificar o nível com a mente, cada elemento, o que quer que seja seu nome, bom esse jeito de pensar chave valor tem muitas eficações com o da fora, porque ele é até a sua mente simples, você dá a chave, tem que base nessa chave, você vai ter retoar na valor coisa com um mente, e você vai ter qualquer sistema, você vai pensar que precisa de cada, coisas assim, de acesso, você consegue pensar em forma de edicionário. Bom, embora eu vi de tempo, eu digo várias coisas, eu vou falar algumas delas aqui, que eu acho que são os principais, e não são as puramades específicas, na verdade são as maias genéricas possíveis, então você precisa entender as ideias básicas por trás das estruturas dados que você conhece, precisa saber implementar elas em algumas linguagens de programação, porque isso vai fazer as estruturas seriam outras em programação, e por fim, mas não menos importante, na verdade, isso é tão importante quanto as duas partes, talvez até mais do que a parte de implementação, que seria basicamente você conseguir escolher e construir a estrutura de dados usar, que nem sempre você quer dar maiores impenhas, você quer uma que dá menos impenha, mas é mais fácil de implementar. O tras vezes você realmente está preocupado com o desempenho, então, sabéis escolher estruturas dados essencial, o jeito de você fazer isso, o jeito sério de você fazer isso, é estudando o análise de algoritmos, né, análise assim títica, você vai saber identificar quando o que leva mais tempo do que outro determinado método, sempre precisar de um hardware para testar isso, porque não pode depender do hardware, seria bom, na verdade, não depender esse do hardware, e a notação big o que é uma das mais populares, junto com o big omega big tetra, elas são usadas para fazer estipo de análise independentemente do hardware, então, quando você conseguir fazer estipo de análise, vai ser mais fácil para você escolher, quais tras vezes você não dá de usar, porque em alguns casos, é verdade que estruturas dados mais convenientes, fica na cara, por exemplo, se você tem um problema que parece que tem uma fila de ocorrendo, você vai usar fila, provavelmente, não sei que tem uma coisa muito específica do seu problema, você vai usar fila, então, é certo, esses casos, em que também na cara, por causa da essência do problema, é com análise que você vai com esse preanálise que eu falei, que você vai conseguir escolher, racionalmente, qual os trotoros dados é mais conveniente para você usar, e quando não precisa ser assim, puramente formal, esse negócio da análise, porque pode ficar até bem incomplicadinho, lança você conseguir bater o olho em um código, o plano é de os códigos, conseguir bater o olho e ver, qual é o tempo que leva em geral a gente chama de tipo, você é o DT, o DT², esses coisas em o DN, o DN², e aí, então, este preanálise de bater o olho no código, dizer qual é a complexidade dele, esse é o Jair Ganks use, e a minha dica é se você quer ser um grande programador, eu recomendo que você gaste mais tempo com estruturas de dados, do que com linguagens propriamente deita, sabe, do que você ficar prendendo um bilhão de linguagens, e, no fim, aprender em uma, ou mesmo aprender muito bem em um modo 2, sem saber estruturas de dados, aí, não vira, né? Então, foca estruturas de dados, nos próximos vídeos eu vou estar falando também de algoritmos e, para digmas que são, outros aspectos que vão te ajudar bastante nesse meio da programação. Se esse vídeo foi útil, deu seu like e se inscreva no canal para acompanhar nosso trabalho. Muito obrigado pela atenção e que é a programação esteja com você.
